#! /usr/bin/python

import json, datetime, random, os, sys, urllib.request


def main():
    path = os.environ['HOME'] + '/.WELCOME'

    now = datetime.datetime.now() ##TODO TODAY?

    # %host -> host, %user -> username, %date -> date
    welcome = json.loads(open(path, 'r').read().replace('%host', os.uname().nodename).replace('%user', os.environ['LOGNAME']).replace('%date', now.strftime('%A, %d %b %Y')))
    
    rows, columns = os.popen('stty size', 'r').read().split()
    width = min(welcome['width_max'], int(columns)) - 2
    if width < welcome['width_min']:
        sys.exit()

    box_ansi = parseansi(welcome['ansi'])
    
    printout = box_ansi + '┏' + '━' * width + '┓' + '\n'
    separator = box_ansi + '┠' + '─' * width + '┨\n'

    for notif in welcome['notifications']:
        tipe = notif['type']
        output = None
        tick = True
        if tipe == 'random':
            output = rand(notif, now)
        elif tipe == 'splash':
            output = splash(notif, now)
        elif tipe == 'reminder':
            output = reminder(notif, now)
        elif tipe == 'always':
            output = always(notif, now)
        elif tipe == 'header':
            output = notif['header']
            tick = False
        elif tipe == 'separator':
            printout += separator
        elif tipe == 'url':
            output = remote(notif, now)
        if output is not None:
            if 'msg' in notif:
                output = notif['msg'].replace('%s', output)
            if 'ansi' in notif:
                printout += pad(output, width, box_ansi, tick=tick, ansi=parseansi(notif['ansi']))
            else:
                printout += pad(output, width, box_ansi, tick=tick)

    printout += box_ansi + '┗' + '━' * width + '┛'
    print(printout)

def pad(message, width, box_ansi, tick=False, ansi=''):
    plain = '\33[0m'
    message = message.replace("\t",'    ')
    s = 0
    n = width - 2
    for i in range(len(message)):
        if message[i] == ' ' or message[i] == '\n':
            s = i
        if i == n:
            message = message[:s] + '\n' + message[s+1:]
            n = s + width - 2
    msg = message.split('\n')
    output = ''
    for m in msg:
        output += '┃ ' + ansi + m + ' ' *(width - len(m) - 1) + box_ansi + '┃\n'
    if tick:
        output = '┣' + output[1:]
    return output

def parseansi(ansi):
    esc = '\33['
    out = ''
    if 'r' in ansi and 'g' in ansi and 'b' in ansi:
        out = '\33[38;2;' + str(ansi['r']) + ';' + str(ansi['g']) + ';' + str(ansi['b']) + 'm'
    if 'codes' in ansi:
        for code in ansi['codes']:
            out += esc + str(code) + 'm'
    return "\33[0m" + out

def reminder(notif, now):
    if 'warnings' in notif:
        warnings = notif['warnings']
    else:
        warnings = [0]
    strp = notif['strp']
    values = notif['values']
    returns = ''
    for val in values:
        for warning in warnings:
            warn_date = now + datetime.timedelta(days=warning)
            t = warn_date.strftime(strp)
            if t == val:
                returns += values[val] + '\n'
    if returns == '':
        return
    return returns.strip()

def rand(notif, now):
    random.seed(now.strftime('%j%Y') + notif['name'])
    if random.random() > notif['null_chance']:
        return random.choice(notif['values'])

def splash(notif, now):
    random.seed()
    if random.random() > notif['null_chance']:
        return random.choice(notif['values'])

def always(notif, now):
    out = ''
    for v in notif['values']:
        out += v + '\n'
    return out.strip()

def remote(notif, now):
    with urllib.request.urlopen(notif['url'],timeout=1) as f:
        result = f.read().decode('utf-8').strip()
        if result == '':
            return
        return result


if __name__ == '__main__':
    main()
